"""Add vis types and spec

Revision ID: 3c9ae2f62f1c
Revises: 996766145599
Create Date: 2025-06-28 08:04:09.533778

"""

import csv
import json
import os

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = "3c9ae2f62f1c"
down_revision = "996766145599"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("cartogram_entry", schema=None) as batch_op:
        batch_op.add_column(sa.Column("types", sa.Text(), nullable=True))
        batch_op.add_column(sa.Column("spec", sa.Text(), nullable=True))

    # ### end Alembic commands ###
    migrate_types()


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("cartogram_entry", schema=None) as batch_op:
        batch_op.drop_column("spec")
        batch_op.drop_column("types")

    # ### end Alembic commands ###


def migrate_types():
    print("Create cartogram column list of existing records...")

    bind = op.get_bind()
    session = sa.orm.Session(bind=bind)

    base_userdata_dir = os.path.join(os.path.dirname(__file__), "../../static/userdata")

    if not os.path.exists(base_userdata_dir):
        print(f"{base_userdata_dir} not found. Skipping type migration.")
        session.close()
        return

    try:
        query = sa.text("SELECT string_key FROM cartogram_entry")
        result = session.execute(query)
        string_keys = [row[0] for row in result]

        if not string_keys:
            print("No maps found in the database. Skipping type migration.")
            session.close()
            return

        for string_key in string_keys:
            versions = []
            data_dir = os.path.join(base_userdata_dir, string_key)
            data_file = os.path.join(data_dir, "data.csv")

            if not os.path.exists(data_file):
                print(f"{data_file} not found. Skipping type migration.")
                continue

            with open(data_file, "r", newline="", encoding="utf-8") as csvfile:
                reader = csv.reader(csvfile)
                # Read the first row to get column headers
                columns = next(reader, None)  # next() returns None if file is empty

                if columns is None:
                    print(
                        f"Warning: CSV file for '{string_key}' is empty or has no header row."
                    )
                    continue

                for column in columns:
                    if column not in [
                        "Region",
                        "RegionLabel",
                        "Color",
                        "ColorGroup",
                        "Inset",
                    ] and not column.startswith("Geographic Area"):
                        versions.append(column)

                types_str = json.dumps({"cartogram": versions})
                session.execute(
                    sa.text(
                        "UPDATE cartogram_entry SET types = :types_str WHERE string_key = :string_key"
                    ),
                    {"types_str": types_str, "string_key": string_key},
                )

            print(f"{string_key} updated.")

    except Exception as e:
        print(f"An error occurred during database query or processing: {e}")
