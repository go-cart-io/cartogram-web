"""Store settings instead spec

Revision ID: 1d23a5d0be02
Revises: 3c9ae2f62f1c
Create Date: 2025-09-04 10:56:29.114407

"""

import json

import sqlalchemy as sa
from alembic import op
from sqlalchemy import text

# revision identifiers, used by Alembic.
revision = "1d23a5d0be02"
down_revision = "3c9ae2f62f1c"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("cartogram_entry", schema=None) as batch_op:
        batch_op.add_column(sa.Column("settings", sa.Text(), nullable=True))

    # Data conversion: migrate spec to settings
    connection = op.get_bind()
    results = connection.execute(
        text("SELECT id, spec FROM cartogram_entry WHERE spec IS NOT NULL")
    )

    for row in results:
        cartogram_id = row[0]
        spec_value = row[1]
        settings_value = f'{{"isAdvanceMode": true, "spec": {spec_value}}}'
        connection.execute(
            text("UPDATE cartogram_entry SET settings = :settings WHERE id = :id"),
            {"settings": settings_value, "id": cartogram_id},
        )

    with op.batch_alter_table("cartogram_entry", schema=None) as batch_op:
        batch_op.drop_column("spec")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("cartogram_entry", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column("spec", sa.TEXT(), autoincrement=False, nullable=True)
        )

    # Data conversion: extract spec from settings
    connection = op.get_bind()
    results = connection.execute(
        text("SELECT id, settings FROM cartogram_entry WHERE settings IS NOT NULL")
    )

    for row in results:
        cartogram_id = row[0]
        settings_value = row[1]

        # Parse the JSON to extract the spec value
        try:
            settings_dict = json.loads(settings_value)
            spec_value = json.dumps(settings_dict.get("spec", ""))
            connection.execute(
                text("UPDATE cartogram_entry SET spec = :spec WHERE id = :id"),
                {"spec": spec_value, "id": cartogram_id},
            )
        except json.JSONDecodeError:
            # Handle cases where settings is not valid JSON
            pass

    with op.batch_alter_table("cartogram_entry", schema=None) as batch_op:
        batch_op.drop_column("settings")
    # ### end Alembic commands ###
